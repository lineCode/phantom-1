// license [
// This file is part of the Phantom project. Copyright 2011-2019 Vivien Millet.
// Distributed under the MIT license. Text available here at
// http://www.wiwila.com/tools/phantom/license/
// ]

#pragma once

/* ****************** Includes ******************* */
#include <ctime>
#include <istream>
#include <phantom/EmbeddedRtti.h>
#include <phantom/phantom.h>
/* **************** Declarations ***************** */

/* *********************************************** */

namespace phantom
{
namespace reflection
{
class PHANTOM_EXPORT_PHANTOM SourceStream
{
    friend class Source;

public:
    static SourceStream* CreateFromUrl(StringView a_Url);

public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Create a char input stream to read the source content.
    ///
    /// \return the input stream.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual std::basic_istream<char>* createInputStream() = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Destroys a previously created char input stream.
    ///
    /// \param the input stream.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void destroyInputStream(std::basic_istream<char>*) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Gets the last time the content of this stream changed.
    ///
    /// \return a time_t value.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual time_t getLastChangeTime() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Gets the source associated with this source stream (if any).
    ///
    /// \return The source or nullptr.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    Source* getSource() const
    {
        return m_pSource;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Gets the path of this stream (the part following the protocol inside the url).
    ///
    /// \return A string view of the path.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    StringView getPath() const
    {
        return m_Path;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Gets the protocol of this stream (the part preceding the path inside the url).
    ///
    /// \return A string view of the protocol.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    StringView getProtocol() const
    {
        return m_Path;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Gets the url of this stream (protocol + path).
    ///
    /// \return The source or nullptr.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    String getUrl() const
    {
        return m_Protocol + m_Path;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  clones this stream.
    ///
    /// \return A new stream exact copy of this one.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual SourceStream* clone() const = 0;

    PHANTOM_EMBEDDED_RTTI; ///< @off

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief  Construct a source stream with given url decomposed as protocol + path(ex:
    /// 'file:C:/MyDev/MySource.soul'").
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    SourceStream(StringView a_Protocol, StringView a_Path) : m_Path(a_Path), m_Protocol(a_Protocol)
    {
    }

private:
    Source* m_pSource = nullptr;

protected:
    String m_Path;
    String m_Protocol;
};
} // namespace reflection
} // namespace phantom
